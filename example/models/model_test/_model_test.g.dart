//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY DF GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/df_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_question_mark
// ignore_for_file: unnecessary_this

part of 'model_test.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class ModelTest extends _ModelTest {
  //
  //
  //

  static const CLASS_NAME = 'ModelTest';

  @override
  String get $className => CLASS_NAME;

  final List<ModelUser>? users;
  final List<int>? checks;
  final Map<String, Map<dynamic, int>>? random;

  //
  //
  //

  const ModelTest({
    this.users,
    this.checks,
    this.random,
  });

  const ModelTest.c2({
    this.users,
    this.checks,
    this.random,
  });

  factory ModelTest.c3({
    List<ModelUser>? users,
    List<int>? checks,
    Map<String, Map<dynamic, int>>? random,
  }) {
    return ModelTest(
      users: users,
      checks: checks,
      random: random,
    );
  }

  factory ModelTest.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelTest.from: $e');
      rethrow;
    }
  }

  @pragma('vm:prefer-inline')
  static ModelTest? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelTest.of(
    ModelTest other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelTest.of: $e');
      rethrow;
    }
  }

  @pragma('vm:prefer-inline')
  static ModelTest? ofOrNull(
    ModelTest? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelTest.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelTest.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelTest? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = letMapOrNull<String, dynamic>(jsonDecode(source));
        return ModelTest.fromJson(decoded);
      } else {
        return const ModelTest.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelTest.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelTest.fromJson: $e');
      rethrow;
    }
  }

  static ModelTest? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final users = letListOrNull<dynamic>(otherData?['users'])
          ?.map(
            (p0) => () {
              final a = letMapOrNull<String, dynamic>(p0);
              return a != null ? ModelUser.fromJson(a) : null;
            }(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final checks = letListOrNull<dynamic>(otherData?['checks'])
          ?.map(
            (p0) => letAsOrNull<int>(p0),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final random = letMapOrNull<dynamic, dynamic>(otherData?['random'])
          ?.map(
            (p0, p1) => MapEntry(
              p0?.toString().trim().nullIfEmpty,
              letMapOrNull<dynamic, dynamic>(p1)
                  ?.map(
                    (p0, p1) => MapEntry(
                      p0,
                      letAsOrNull<int>(p1),
                    ),
                  )
                  .nonNulls
                  .nullIfEmpty,
            ),
          )
          .nonNulls
          .nullIfEmpty;
      return ModelTest(
        users: users,
        checks: checks,
        random: random,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelTest.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelTest.fromUri: $e');
      rethrow;
    }
  }

  static ModelTest? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelTest.fromJson(uri.queryParameters);
      } else {
        return const ModelTest.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    bool includeNulls = false,
  }) {
    try {
      final users0 = this
          .users
          ?.map(
            (p0) => p0?.toJson(),
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final checks0 = this
          .checks
          ?.map(
            (p0) => p0,
          )
          .nonNulls
          .nullIfEmpty
          ?.toList();
      final random0 = this
          .random
          ?.map(
            (p0, p1) => MapEntry(
              p0?.trim().nullIfEmpty,
              p1
                  ?.map(
                    (p0, p1) => MapEntry(
                      p0,
                      p1,
                    ),
                  )
                  .nonNulls
                  .nullIfEmpty,
            ),
          )
          .nonNulls
          .nullIfEmpty;
      final withNulls = {
        'users': users0,
        'random': random0,
        'checks': checks0,
      };
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelTest.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelTest mergeWith(
    BaseModel? other, {
    bool deepMerge = true,
  }) {
    final a = toJson();
    final b = other?.toJson() ?? {};
    final data = (deepMerge ? mergeDataDeep(a, b) : {...a, ...b}) as Map;
    return ModelTest.fromJson(data.cast());
  }

  //
  //
  //

  ModelTest copyWith({
    List<ModelUser>? users,
    List<int>? checks,
    Map<String, Map<dynamic, int>>? random,
  }) {
    return ModelTest.c2(
      users: users ?? this.users,
      checks: checks ?? this.checks,
      random: random ?? this.random,
    );
  }

  //
  //
  //

  ModelTest copyWithout({
    bool users = true,
    bool checks = true,
    bool random = true,
  }) {
    return ModelTest.c2(
      users: users ? this.users : null,
      checks: checks ? this.checks : null,
      random: random ? this.random : null,
    );
  }

  //
  //
  //

  // users.
  @pragma('vm:prefer-inline')
  List<ModelUser>? get usersField => this.users;

  // checks.
  @pragma('vm:prefer-inline')
  List<int>? get checksField => this.checks;

  // random.
  @pragma('vm:prefer-inline')
  Map<String, Map<dynamic, int>>? get randomField => this.random;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

abstract final class ModelTestFieldNames {
  static const users = 'users';
  static const checks = 'checks';
  static const random = 'random';
}
