//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY DF GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/df_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: require_trailing_commas
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_question_mark
// ignore_for_file: unnecessary_this

part of 'model_user.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class ModelUser extends _ModelUser {
  //
  //
  //

  static const CLASS_NAME = 'ModelUser';

  @override
  String get $className => CLASS_NAME;

  final String? id;
  final String? firstName;
  final String? lastName;

  //
  //
  //

  const ModelUser({
    required this.id,
    this.firstName,
    this.lastName,
  });

  const ModelUser.c2({
    this.id,
    this.firstName,
    this.lastName,
  });

  factory ModelUser.c3({
    String? id,
    String? firstName,
    String? lastName,
  }) {
    assert(id != null);

    return ModelUser(
      id: id,
      firstName: firstName,
      lastName: lastName,
    );
  }

  factory ModelUser.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelUser.from: $e');
      rethrow;
    }
  }

  @pragma('vm:prefer-inline')
  static ModelUser? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelUser.of(
    ModelUser other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelUser.of: $e');
      rethrow;
    }
  }

  @pragma('vm:prefer-inline')
  static ModelUser? ofOrNull(
    ModelUser? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelUser.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelUser.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelUser? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = letMapOrNull<String, dynamic>(jsonDecode(source));
        return ModelUser.fromJson(decoded);
      } else {
        return const ModelUser.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelUser.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelUser.fromJson: $e');
      rethrow;
    }
  }

  static ModelUser? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final id = otherData?['id']?.toString().trim().nullIfEmpty;
      final firstName = otherData?['firstName']?.toString().trim().nullIfEmpty;
      final lastName = otherData?['lastName']?.toString().trim().nullIfEmpty;
      return ModelUser(
        id: id,
        firstName: firstName,
        lastName: lastName,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelUser.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelUser.fromUri: $e');
      rethrow;
    }
  }

  static ModelUser? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelUser.fromJson(uri.queryParameters);
      } else {
        return const ModelUser.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    bool includeNulls = false,
  }) {
    try {
      final id0 = this.id?.trim().nullIfEmpty;
      final firstName0 = this.firstName?.trim().nullIfEmpty;
      final lastName0 = this.lastName?.trim().nullIfEmpty;
      final withNulls = {
        'lastName': lastName0,
        'id': id0,
        'firstName': firstName0,
      };
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelUser.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelUser mergeWith(
    BaseModel? other, {
    bool deepMerge = true,
  }) {
    final a = toJson();
    final b = other?.toJson() ?? {};
    final data = (deepMerge ? mergeDataDeep(a, b) : {...a, ...b}) as Map;
    return ModelUser.fromJson(data.cast());
  }

  //
  //
  //

  ModelUser copyWith({
    String? id,
    String? firstName,
    String? lastName,
  }) {
    return ModelUser.c2(
      id: id ?? this.id,
      firstName: firstName ?? this.firstName,
      lastName: lastName ?? this.lastName,
    );
  }

  //
  //
  //

  ModelUser copyWithout({
    bool id = true,
    bool firstName = true,
    bool lastName = true,
  }) {
    return ModelUser.c2(
      id: id ? this.id : null,
      firstName: firstName ? this.firstName : null,
      lastName: lastName ? this.lastName : null,
    );
  }

  //
  //
  //

  // id.
  @pragma('vm:prefer-inline')
  String get idField => this.id!;

  // firstName.
  @pragma('vm:prefer-inline')
  String? get firstNameField => this.firstName;

  // lastName.
  @pragma('vm:prefer-inline')
  String? get lastNameField => this.lastName;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

abstract final class ModelUserFieldNames {
  static const id = 'id';
  static const firstName = 'firstName';
  static const lastName = 'lastName';
}
